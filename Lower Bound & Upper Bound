#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
using namespace std;
int main()
{
    vector<int> v = { 10, 20, 30, 30, 30, 40, 50 };
    std::vector<int>::iterator it1, it2,it3;

    it1 = std::lower_bound(v.begin(), v.end(), 30);
    it2 = std::lower_bound(v.begin(), v.end(), 29);
    it3 = std::lower_bound(v.begin(), v.end(), 59);

    cout << it1 - v.begin() << "\n";
    cout << it3 - v.begin()  << "\n";
     /*
     In CPP iterator - vector.begin() gives the index position at the vector(0 based)
     
     *iterator gives value at index iterator - vector.begin()

     If value is greater then it's index will be n(vector.size())
     If index is n, *iterator will crash
     
     */
    std::vector<int>::iterator it4;
    it4 = std::upper_bound(v.begin(), v.end(), 30);
    cout << it4 - v.begin() << "\n";
    /*
    The index and value technique is same as lower bound

    lower bound - Target is 30.So it will point to the first value>=30
    upper bound - Target is 30.So it will point to the first value>30
    
    */

}
