#include <bits/stdc++.h>
using namespace std;
int main()
{
    vector<int> v{11,12,34,67,89,45,23,12,45,78};
    set<int> s{11,12,134,156,190};
    map<int, int> m;
    m[1] = 9, m[12] = 89, m[4] = 56, m[7] = 89, m[15] = 78, m[11] = 110;
    
    
    /*** vector ***/
    auto it_lb = lower_bound(v.begin(),v.end(),44); ///iterator
    ///O(log(N))
    
    auto it_ub = upper_bound(v.begin(),v.end(),44); ///iterator
    ///O(log(N))
    
    v.clear(); ///void
    ///O(1)
    
    
    
    /*** set ***/
    s.insert(target) //void
    ///O(log(N)
    
    auto it_lb = s.lower_bound(element); ///iterartor
    ///O(log(N))

    auto it_ub = s.upper_bound(element); ///iterator
    ///O(log(N))

    s.clear(); //void
    ///O(1)
    
    s.count(element) ///int; 1 if present , else 0
    ///O(log(N))
    
    s.find(element) ///iterator
    ///O(log(N))
    
    
    /*** map ***/
    mp.insert(target) //void
    ///O(log(N)
    
    auto it_lb = mp.lower_bound(element); ///iterartor
    ///O(log(N))

    auto it_ub = mp.upper_bound(element); ///iterator
    ///O(log(N))

    mp.clear(); //void
    ///O(1)
    
    mp.count(element) ///int; 1 if present , else 0
    ///O(log(N))
    
    mp.find(element) ///iterator
    ///O(log(N))
    
    // *iterator = pair
    
    
    */
    
    // ============================================================================================================ //
    
    /**
    Also,
    /// Vector
    back(): last element // O(1)
    front(): last element // O(1)
    pop_back(): void(removes last elem) // O(1)
    push_back(): void(inserts at the end of vector) // O(1)


    /// List
    Same methods in vector,in addition
    pop_front( ) : void(removes first elem) // O(1)

    /// Stack
    push( ): same as vector
    pop( ): returns last element and removes as well // O(1)
    top( ): returns last element // O(1)
    empty( ): bool(checks if empty) ///O(1).
    size( ): returns the size of stack ///O(1).

    /// Queue
    push( ): inserts a new element at the last 
    pop( ): removes last element
    front() : returns front element
    back( ): returns last element 
    empty( ): bool(checks if empty)
    size( ): returns the size of queue
    **/
    
    /// Priority Queue
    push( ): inserts a new element /// O(logN)
    pop( ): returns last element and removes as well /// O(logN)
    top( ): returns last element // O(1)
    empty( ): bool(checks if empty) ///O(1).
    size( ): returns the size of queue ///O(1).
    **/
    
    /// deque
    void : push_back(element) , push_front(element) , pop_back() , pop_front()
    // O(1)
    back() : returns last element
    // O(1)
    front() : returns front element
    // O(1)
    size( ): returns the size of deque
    // O(1).
}
    
    
    
    
    
    
    
    
    
    
    
