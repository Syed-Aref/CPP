#include <bits/stdc++.h>
using namespace std;
int main()
{
    vector<int> v{11,12,34,67,89,45,23,12,45,78};
    set<int> s{11,12,134,156,190};
    map<int, int> m;
    m[1] = 9, m[12] = 89, m[4] = 56, m[7] = 89, m[15] = 78, m[11] = 110;
    
    
    /*
    // vector
    1.Find : 
    find(v.begin(),v.end(),target) 
    Time : O(N)
    2.Erase :
    v.erase(v.begin()+4) // erases v[4] or fifth element
    v.erase(v.begin()+2,v.begin()+5) // erases v[2],v[3],v[4]
    Time : O(N)
    3.Insert :
    v.insert(v.begin(),element) // inserting at first position
    v.insert(v.begin()+2,element) // inserting at (1+2)=3rd position
    Time : O(N)
    4.Lower bound :
    auto it_lb = lower_bound(v.begin(),v.end(),44);
    Time : O(log(N))
    5.Upper bound :
    auto it_ub = upper_bound(v.begin(),v.end(),44);
    Time : O(log(N))
    6.Clear:
    v.clear(); 
    Time: O(1)
    
    
    
    // set
    1.Find: 
    s.find(target)
    Time : O(log(N))
    2.Erase : 
    s.erase(target)
    Time : O(log(N))
    3.Insert : 
    s.insert(target)
    Time : O(log(N))4.Lower bound :
    auto it_lb = s.lower_bound(element);
    Time : O(log(N))
    5.Upper bound :
    auto it_ub = s.upper_bound(element);
    Time : O(log(N))
    6.Clear:
    s.clear(); 
    Time: O(1)
    
    
    
    
    
    
    // map
    1.Find :
    m.find(key_target)
    Time : O(log(N))
    2.Erase : 
    m.erase(key_target)
    Time : O(log(N))
    3.Insert : 
    m[new_key] = any_value
    Time : O(log(N))
    4.Lower bound :
    auto it_lb = m.lower_bound(element);
    Time : O(log(N))
    5.Upper bound :
    auto it_ub = m.upper_bound(element);
    Time : O(log(N))
    6.Clear:
    m.clear(); 
    Time: O(1)
    
    
    
    
    */
    
    // ============================================================================================================ //
    /*
    
    Additional vector methods:
    v.push_back(element)  //O(1)
    v.pop_back() // O(1)
    reverse(v.begin(),v.end()) // O(N)
    sort(v.begin(),v.end()) //O(log(N))
    vector<int> v1(7); // O(N) [Initializing.Creates N sized 0 defined vector]
    v1.resize(4); // O(N) [Resizing.Keeps first 0 to n-1 elements and deletes the rest]
    //For vector iterators:
    auto any_it1 = v.begin() + m; // O(N)[m>=0 & m<=size]
    auto any_it2 = v.end() - m; // O(N)[m>=0 & m<=size]
    
    Additional set and map methods
    // set iterator doesn't support iterator arithmetic operation
    // Accessing mth number from the begining    
    for(int i = 0;i<m-1;i++)
        it++;
    This is O(N) operation
    
    s.count(element); // O(log(N)) [Returns 1 if element is present ot returns 0]
    
    
    */
}
    
    
    
    
    
    
    
    
    
    
    
